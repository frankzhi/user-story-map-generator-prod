import type { StoryMapYAML } from '../types/story';
import i18n from '../i18n';

interface DeepSeekMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface DeepSeekResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

export class DeepSeekService {
  private apiKey: string;
  private apiUrl: string;

  constructor() {
    try {
      this.apiKey = import.meta.env.VITE_DEEPSEEK_API_KEY || '';
      this.apiUrl = import.meta.env.VITE_DEEPSEEK_API_URL || 'https://api.deepseek.com/v1/chat/completions';
    } catch (error) {
      console.warn('Failed to initialize DeepSeek service:', error);
      this.apiKey = '';
      this.apiUrl = 'https://api.deepseek.com/v1/chat/completions';
    }
  }

  async generateStoryMap(productDescription: string): Promise<StoryMapYAML> {
    const startTime = Date.now();
    console.log('üîß DeepSeekÊúçÂä° - ÂºÄÂßãÁîüÊàêÊïÖ‰∫ãÂú∞Âõæ');
    console.log('üîß APIÂØÜÈí•Áä∂ÊÄÅ:', this.apiKey ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ');
    console.log('‚è±Ô∏è ÂºÄÂßãÊó∂Èó¥:', new Date().toISOString());
    
    if (!this.apiKey) {
      throw new Error('DeepSeek API key not found. Please add VITE_DEEPSEEK_API_KEY to your environment variables.');
    }

    const currentLang = i18n.language;
    const languageContext = currentLang === 'zh' ? 'MANDATORY: You MUST respond in Chinese (Simplified Chinese). All content including titles, descriptions, and task names must be in Chinese.' : 'Please respond in English.';
    
    const systemPrompt = `You are an expert product manager and user story mapping specialist. 
    
Your task is to generate a comprehensive user story map from a product description. 

CRITICAL: Supporting requirements are technical dependencies, integrations, and infrastructure needs - NOT functional descriptions or rephrased user stories.

üö® CRITICAL DISTINCTION:

USER STORIES describe WHAT users want to achieve:
- "Áî®Êà∑ÊÉ≥Ë¶ÅÊü•ÁúãÂÆ†Áâ©ËØ¶ÊÉÖ"
- "Áî®Êà∑ÊÉ≥Ë¶ÅË¥≠‰π∞È£üÁâ©"
- "Áî®Êà∑ÊÉ≥Ë¶ÅÊü•ÁúãÊäïÂñÇËÆ∞ÂΩï"

SUPPORTING REQUIREMENTS describe WHAT TECHNICAL INFRASTRUCTURE is needed:
- "ÈúÄË¶Å MySQL Êï∞ÊçÆÂ∫ìÂ≠òÂÇ®ÂÆ†Áâ©‰ø°ÊÅØ"
- "ÈúÄË¶ÅÊîØ‰ªòÁΩëÂÖ≥Â§ÑÁêÜ‰∫§Êòì"
- "ÈúÄË¶ÅÂú∞Âõæ SDK ÊòæÁ§∫‰ΩçÁΩÆ"
- "ÈúÄË¶Å Redis ÁºìÂ≠òÊèêÂçáÊÄßËÉΩ"

NEVER write supporting requirements like "ÂÆûÁé∞ÂÆ†Áâ©ËØ¶ÊÉÖÈ°µ" - that is still a user story!

Supporting requirements MUST include:
- Specific technical components (SDKs, APIs, Libraries, Frameworks)
- Version numbers when applicable
- API endpoints when applicable
- SDK names when applicable

Examples of CORRECT supporting requirements:
- "Integrate Firebase Authentication for user authentication"
- "Implement Bluetooth Low Energy (BLE) protocol for device communication"
- "Use React Native for cross-platform mobile development"
- "Connect to AWS S3 for file storage"
- "Create MySQL database for user data storage"
- "Implement RESTful API for data communication"

Examples of WRONG supporting requirements (DO NOT DO THIS):
- "ÂÆûÁé∞ÊâãÊú∫Âè∑È™åËØÅÁ†ÅÁôªÂΩï" (This is just rephrasing the user story!)
- "Êâ´ÊèèÈôÑËøëÂèØÁî®ÁöÑÊô∫ËÉΩÊâãË°®ËÆæÂ§á" (This is functional description!)
- "ËÆæÂ§áÈÖçÂØπÊµÅÁ®ã" (This is task breakdown!)
- "ÂÆûÁé∞ÂÆ†Áâ©ËØ¶ÊÉÖÈ°µ" (This is still a user story!)

CRITICAL: You MUST return ONLY a valid JSON object. Do NOT include any markdown formatting, code blocks, or additional text. Do NOT wrap your response in code blocks.

Return ONLY this JSON structure:

{
  "title": "Product Title",
  "description": "Product Description",
  "epics": [
    {
      "title": "Epic Title",
      "description": "Epic Description",
      "features": [
        {
          "title": "Feature Title",
          "description": "Feature Description",
          "tasks": [
            {
              "title": "Task Title",
              "description": "Task Description",
              "priority": "high|medium|low",
              "effort": "X days",
              "acceptance_criteria": [
                "Criteria 1",
                "Criteria 2",
                "Criteria 3"
              ],
              "supporting_requirements": [
                {
                  "title": "Supporting Requirement Title",
                  "description": "Supporting Requirement Description",
                  "type": "software_dependency|service_integration|security_compliance|performance_requirement",
                  "priority": "high|medium|low",
                  "technical_specs": {
                    "version": "Specific version number",
                    "api_endpoint": "API endpoint URL (if applicable)",
                    "sdk_name": "SDK name (if applicable)",
                    "integration_type": "Type of integration",
                    "documentation_url": "Documentation URL (if applicable)"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}

Guidelines:
- Create 3-5 epics that cover the main functional areas
- Each epic should have 2-4 features
- Each feature should have 4-8 tasks (MANDATORY: Generate at least 4 tasks per feature to ensure comprehensive coverage)
- MANDATORY: If you generate fewer than 4 tasks per feature, you are not following the requirements
- Each task MUST have at least 1-2 supporting requirements (MANDATORY: Every task needs technical infrastructure)
- Supporting requirements should cover the main technical dependencies for each task
- Think about what technical components are needed to implement each user story
- MANDATORY: Break down each feature comprehensively - do not create generic tasks

TASK GENERATION STRATEGY:
- CRITICAL: Think about COMPLETE user journeys, not just basic actions
- Consider different user personas (new users, power users, admin users)
- Include edge cases and error scenarios
- Think about different devices and platforms
- Consider offline/online scenarios
- Include data management and privacy features
- Think about performance and scalability requirements
- Consider integration with other systems
- Include notification and communication features
- Think about analytics and reporting needs

EXAMPLES OF COMPREHENSIVE TASK BREAKDOWN:
For a "User Registration" feature, break it down into:
- Áî®Êà∑Â°´ÂÜôÊ≥®ÂÜåË°®Âçï
- Áî®Êà∑È™åËØÅÊâãÊú∫Âè∑

For a "Product Search" feature, break it down into:
- Áî®Êà∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç
- Áî®Êà∑Êü•ÁúãÊêúÁ¥¢ÁªìÊûú

- Tasks should be specific, actionable, and testable
- Priority should be based on business value and user impact
- Effort should be realistic (1-5 days per task)
- Acceptance criteria should be clear and measurable
- Focus on user value and business outcomes
- IMPORTANT: Break down each feature into multiple specific tasks to ensure comprehensive coverage
- Each task should represent a distinct user action or system behavior
- Avoid generic tasks - be specific about what users want to accomplish
- Think about different user scenarios, edge cases, and user journeys
- Consider different user roles, personas, and use cases for each feature
${languageContext}`;

    const userPrompt = `Generate a user story map for this product: ${productDescription}. 

CRITICAL REQUIREMENTS:
1. MANDATORY: For each feature, break it down into at least 4-8 specific user tasks to ensure comprehensive coverage
2. MANDATORY: If you generate fewer than 4 tasks per feature, you are not following the requirements
3. Think about COMPLETE user journeys, not just basic actions
4. Consider different user personas (new users, power users, admin users)
5. Include edge cases, error scenarios, and data management features
6. Think about different devices, platforms, and offline/online scenarios
7. Include notification, communication, analytics, and reporting features
8. Consider integration with other systems and scalability requirements
9. MANDATORY: Do not create generic tasks like "Áî®Êà∑Ê≥®ÂÜå" - break them down into specific actions

EXAMPLES OF COMPREHENSIVE TASK BREAKDOWN:
For a "User Registration" feature, don't just create "Áî®Êà∑Ê≥®ÂÜå" - break it down into:
- Áî®Êà∑Â°´ÂÜôÊ≥®ÂÜåË°®Âçï
- Áî®Êà∑È™åËØÅÊâãÊú∫Âè∑
- Áî®Êà∑ËÆæÁΩÆÂØÜÁ†Å
- Áî®Êà∑ÂêåÊÑèÊúçÂä°Êù°Ê¨æ
- Áî®Êà∑‰∏ä‰º†Â§¥ÂÉè
- Áî®Êà∑ÂÆåÂñÑ‰∏™‰∫∫ËµÑÊñô
- Áî®Êà∑ÈÄâÊã©ÂÅèÂ•ΩËÆæÁΩÆ
- Áî®Êà∑ÂÆåÊàêÈÇÆÁÆ±È™åËØÅ

For a "Product Search" feature, don't just create "ÊêúÁ¥¢‰∫ßÂìÅ" - break it down into:
- Áî®Êà∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç
- Áî®Êà∑Â∫îÁî®Á≠õÈÄâÊù°‰ª∂
- Áî®Êà∑Êü•ÁúãÊêúÁ¥¢ÁªìÊûú
- Áî®Êà∑ÊéíÂ∫èÊêúÁ¥¢ÁªìÊûú
- Áî®Êà∑‰øùÂ≠òÊêúÁ¥¢ÂéÜÂè≤
- Áî®Êà∑ËÆæÁΩÆÊêúÁ¥¢ÊèêÈÜí
- Áî®Êà∑ÂàÜ‰∫´ÊêúÁ¥¢ÁªìÊûú
- Áî®Êà∑ÂØºÂá∫ÊêúÁ¥¢ÁªìÊûú

IMPORTANT: Every task must have supporting requirements that describe the technical infrastructure needed to implement it. Think about APIs, databases, SDKs, and other technical dependencies for each user story.

CRITICAL: Each supporting requirement MUST have a valid "type" field with one of these values:
- "software_dependency" for libraries, frameworks, SDKs
- "service_integration" for APIs, external services
- "security_compliance" for authentication, encryption, compliance
- "performance_requirement" for caching, optimization, scalability

Examples of correct type assignments:
- MySQL database ‚Üí "software_dependency"
- REST API ‚Üí "service_integration" 
- JWT authentication ‚Üí "security_compliance"
- Redis caching ‚Üí "performance_requirement"`;

    const messages: DeepSeekMessage[] = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ];

    try {
      // ÂàõÂª∫Ë∂ÖÊó∂ÊéßÂà∂Âô®
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60ÁßíË∂ÖÊó∂
      
      console.log('‚è±Ô∏è ÂáÜÂ§áÂèëÈÄÅAPIËØ∑Ê±Ç...');
      const requestStartTime = Date.now();
      
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages,
          temperature: 0.7,
          max_tokens: 6000
        }),
        signal: controller.signal
      });
      
      const requestEndTime = Date.now();
      const requestDuration = requestEndTime - requestStartTime;
      console.log('‚è±Ô∏è APIËØ∑Ê±ÇÂÆåÊàêÔºåËÄóÊó∂:', requestDuration, 'ms');
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
      }

      const jsonParseStartTime = Date.now();
      const data: DeepSeekResponse = await response.json();
      const jsonParseEndTime = Date.now();
      console.log('‚è±Ô∏è JSONËß£ÊûêËÄóÊó∂:', jsonParseEndTime - jsonParseStartTime, 'ms');
      
      const content = data.choices[0]?.message?.content;

      // üîç DEBUG: Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
      console.log('üîç AI ÂéüÂßãÂìçÂ∫î:', content);

      if (!content) {
        throw new Error('No response content from DeepSeek API');
      }

      // Try to extract JSON from the response with better error handling and timeout protection
      const jsonExtractStartTime = Date.now();
      let storyMap;
      
      // ÂàõÂª∫JSONËß£ÊûêË∂ÖÊó∂‰øùÊä§
      const jsonParseTimeout = 10000; // 10ÁßíJSONËß£ÊûêË∂ÖÊó∂
      const jsonParsePromise = new Promise((resolve, reject) => {
        try {
          // First try to parse the entire content as JSON
          const result = JSON.parse(content);
          resolve(result);
        } catch (parseError) {
          console.warn('üîß Áõ¥Êé•Ëß£ÊûêÂ§±Ë¥•ÔºåÂ∞ùËØïÊ∏ÖÁêÜÂíåÊèêÂèñJSON:', parseError);
          
          // Clean the content - remove markdown formatting
          let cleanedContent = content
            .replace(/```json\s*/g, '')
            .replace(/```\s*/g, '')
            .replace(/^["']*json["']*\s*/, '') // Remove "json" prefix
            .trim();
          
          try {
            const result = JSON.parse(cleanedContent);
            resolve(result);
          } catch (cleanError) {
            console.warn('üîß Ê∏ÖÁêÜÂêéËß£ÊûêÂ§±Ë¥•ÔºåÂ∞ùËØïÊèêÂèñJSONÂùó:', cleanError);
            
            // Try to extract JSON from markdown code blocks
            const jsonMatch = content.match(/```json\s*(\{[\s\S]*?\})\s*```/);
            if (jsonMatch) {
              try {
                const result = JSON.parse(jsonMatch[1]);
                resolve(result);
              } catch (blockError) {
                console.warn('üîß ‰ª£Á†ÅÂùóËß£ÊûêÂ§±Ë¥•ÔºåÂ∞ùËØïÁÆÄÂçïÂåπÈÖç:', blockError);
                
                // Try simple JSON extraction
                const simpleMatch = content.match(/\{[\s\S]*\}/);
                if (simpleMatch) {
                  try {
                    const result = JSON.parse(simpleMatch[0]);
                    resolve(result);
                  } catch (simpleError) {
                    console.error('üîß ÊâÄÊúâJSONËß£ÊûêÊñπÊ≥ïÈÉΩÂ§±Ë¥•:', simpleError);
                    console.error('üîß ÂéüÂßãÂÜÖÂÆπ:', content.substring(0, 500));
                    reject(new Error('Failed to parse JSON from AI response'));
                  }
                } else {
                  reject(new Error('No valid JSON found in DeepSeek response'));
                }
              }
            } else {
              reject(new Error('No valid JSON found in DeepSeek response'));
            }
          }
        }
      });
      
      // Ê∑ªÂä†Ë∂ÖÊó∂‰øùÊä§
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('JSON parsing timeout')), jsonParseTimeout);
      });
      
      try {
        storyMap = await Promise.race([jsonParsePromise, timeoutPromise]) as any;
      } catch (parseError) {
        if (parseError instanceof Error && parseError.message === 'JSON parsing timeout') {
          console.error('‚è±Ô∏è JSONËß£ÊûêË∂ÖÊó∂ÔºåËÄóÊó∂Ë∂ÖËøá10Áßí');
          throw new Error('JSON parsing timeout: AI response took too long to parse');
        }
        throw parseError;
      }

      const jsonExtractEndTime = Date.now();
      console.log('‚è±Ô∏è JSONÊèêÂèñÂíåËß£ÊûêÊÄªËÄóÊó∂:', jsonExtractEndTime - jsonExtractStartTime, 'ms');

      // üîç DEBUG: Ê∑ªÂä†Ë∞ÉËØïÊó•Âøó
      console.log('üîç Ëß£ÊûêÂêéÁöÑ JSON:', JSON.stringify(storyMap, null, 2));

      // üîç DEBUG: Ê£ÄÊü•ÊîØÊíëÊÄßÈúÄÊ±Ç
      if (storyMap.epics) {
        storyMap.epics.forEach((epic: any, epicIndex: number) => {
          if (epic.features) {
            epic.features.forEach((feature: any, featureIndex: number) => {
              if (feature.tasks) {
                feature.tasks.forEach((task: any, taskIndex: number) => {
                  if (task.supporting_requirements) {
                    console.log(`üîç Epic ${epicIndex}, Feature ${featureIndex}, Task ${taskIndex} ÁöÑÊîØÊíëÊÄßÈúÄÊ±Ç:`, task.supporting_requirements);
                  }
                });
              }
            });
          }
        });
      }

      const validationStartTime = Date.now();
      const result = this.validateAndTransformResponse(storyMap);
      const validationEndTime = Date.now();
      console.log('‚è±Ô∏è Êï∞ÊçÆÈ™åËØÅÂíåËΩ¨Êç¢ËÄóÊó∂:', validationEndTime - validationStartTime, 'ms');
      
      const totalTime = Date.now() - startTime;
      console.log('‚è±Ô∏è ÊÄªËÄóÊó∂:', totalTime, 'ms');
      console.log('‚è±Ô∏è ÁªìÊùüÊó∂Èó¥:', new Date().toISOString());
      
      return result;

    } catch (error) {
      const errorTime = Date.now() - startTime;
      console.error('‚ùå DeepSeek API error (ËÄóÊó∂:', errorTime, 'ms):', error);
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØË∂ÖÊó∂ÈîôËØØ
      if (error instanceof Error && error.name === 'AbortError') {
        console.error('‚è±Ô∏è ËØ∑Ê±ÇË∂ÖÊó∂ÔºåÊÄªËÄóÊó∂:', errorTime, 'ms');
        throw new Error('Request timeout: AI service took too long to respond (60 seconds). Please try again.');
      }
      
      throw new Error(`Failed to generate story map: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private validateAndTransformResponse(response: any): StoryMapYAML {
    // Basic validation
    if (!response.title || !response.description || !Array.isArray(response.epics)) {
      throw new Error('Invalid response structure from DeepSeek API');
    }

    // Transform and validate the response
    const transformed: StoryMapYAML = {
      title: response.title,
      description: response.description,
      epics: response.epics.map((epic: any) => ({
        title: epic.title || 'Untitled Epic',
        description: epic.description || '',
        features: (epic.features || []).map((feature: any) => ({
          title: feature.title || 'Untitled Feature',
          description: feature.description || '',
                      tasks: (feature.tasks || []).map((task: any) => ({
              title: task.title || 'Untitled Task',
              description: task.description || '',
              priority: task.priority || 'medium',
              effort: task.effort || '2 days',
              acceptance_criteria: Array.isArray(task.acceptance_criteria) 
                ? task.acceptance_criteria 
                : ['Acceptance criteria not specified'],
              supporting_requirements: Array.isArray(task.supporting_requirements)
                ? task.supporting_requirements.map((req: any) => ({
                    title: req.title || 'Untitled Supporting Requirement',
                    description: req.description || '',
                    type: req.type || 'software_dependency',
                    priority: req.priority || 'medium',
                    technical_specs: req.technical_specs ? {
                      version: req.technical_specs.version || '',
                      api_endpoint: req.technical_specs.api_endpoint || '',
                      sdk_name: req.technical_specs.sdk_name || '',
                      integration_type: req.technical_specs.integration_type || '',
                      documentation_url: req.technical_specs.documentation_url || ''
                    } : undefined
                  }))
                : []
            }))
        }))
      }))
    };

    return transformed;
  }

  async generateEnhancedStory(userPrompt: string, systemPrompt: string): Promise<any> {
    if (!this.apiKey) {
      throw new Error('DeepSeek API key not found. Please add VITE_DEEPSEEK_API_KEY to your environment variables.');
    }
    
    const messages: DeepSeekMessage[] = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: userPrompt }
    ];

    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages,
          temperature: 0.8,
          max_tokens: 8000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
      }

      const data: DeepSeekResponse = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        throw new Error('No response content from DeepSeek API');
      }

      // Try to extract JSON from the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON found in DeepSeek response');
      }

      return JSON.parse(jsonMatch[0]);

    } catch (error) {
      console.error('DeepSeek API error:', error);
      throw new Error(`Failed to enhance story: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  isConfigured(): boolean {
    try {
      return !!this.apiKey;
    } catch (error) {
      console.warn('Error checking DeepSeek configuration:', error);
      return false;
    }
  }

  async generateStoryMapWithFeedback(currentStoryMap: any, feedbackPrompt: string): Promise<StoryMapYAML> {
    try {
      if (!this.apiKey) {
        throw new Error('DeepSeek API key not found.');
      }

      const currentLang = i18n.language;
      const languageContext = currentLang === 'zh' ? 'Please respond in Chinese (Simplified Chinese). All content including titles, descriptions, and acceptance criteria should be in Chinese.' : 'Please respond in English.';
      
      const systemPrompt = `You are an expert product manager and user story mapping specialist. 

Your task is to modify an existing user story map based on user feedback. 

IMPORTANT: Return ONLY a valid JSON object with the following structure, no additional text or explanations:

{
  "title": "Product Title",
  "description": "Product Description", 
  "epics": [
    {
      "title": "Epic Title",
      "description": "Epic Description",
      "features": [
        {
          "title": "Feature Title", 
          "description": "Feature Description",
          "tasks": [
            {
              "title": "Task Title",
              "description": "Task Description", 
              "priority": "high|medium|low",
              "effort": "X days",
              "acceptance_criteria": [
                "Criteria 1",
                "Criteria 2", 
                "Criteria 3"
              ]
            }
          ]
        }
      ]
    }
  ]
}

Guidelines for modification:
- Understand the user's feedback and modify the story map accordingly
- If user wants to add new stages/epics, create them with complete features and tasks
- If user wants to modify existing content, update it based on feedback
- If user wants to complete missing content (activities, touchpoints, user stories, supporting needs), add them appropriately
- If user wants to DELETE content:
  * "Âà†Èô§ÊâÄÊúâÊîØÊíëÊÄßÈúÄÊ±Ç" or "remove all supporting needs" - Remove all tasks from all features
  * "Âà†Èô§ÊâÄÊúâÊ¥ªÂä®" or "remove all activities" - Remove all features from all epics
  * "Âà†Èô§ÊâÄÊúâÈò∂ÊÆµ" or "remove all phases" - Remove all epics
  * "Âà†Èô§ÊâÄÊúâÂÜÖÂÆπ" or "remove all content" - Clear the entire story map
- Maintain the overall structure and quality of the story map
- Ensure all tasks have proper priority, effort estimates, and acceptance criteria
- For supporting needs, focus on specific technical requirements that are directly related to the user stories and business functionality
- Each supporting need should be specific to the business domain and provide concrete technical know-how

${languageContext}`;

      // Convert current story map to a readable format for AI
      const currentStoryMapText = JSON.stringify(currentStoryMap, null, 2);

      const userPrompt = `Current User Story Map:
${currentStoryMapText}

User Feedback:
${feedbackPrompt}

Please modify the story map based on the user feedback and return the complete updated story map in JSON format.`;

      const messages: DeepSeekMessage[] = [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ];

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: messages,
          temperature: 0.8,
          max_tokens: 8000
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
      }

      const data: DeepSeekResponse = await response.json();
      const content = data.choices[0]?.message?.content;

      if (!content) {
        throw new Error('No response content from DeepSeek API');
      }

      // Try to extract JSON from the response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON found in DeepSeek response');
      }

      return JSON.parse(jsonMatch[0]);

    } catch (error) {
      console.error('Error generating story map with feedback:', error);
      throw error;
    }
  }
} 